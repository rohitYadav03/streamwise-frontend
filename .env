import { useState } from "react";
import type { ChangeEvent, FormEvent } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Header from "./Header";

// --- Local types for request/response ---
interface AuthResponse {
  message: string;
  // add token or user fields here if your API returns them
}

interface LoginPayload {
  email: string;
  password: string;
}

interface SignupPayload {
  name: string;
  email: string;
  password: string;
}

const API_BASE = import.meta.env.VITE_API_URL ?? "http://localhost:3000";

const Login = (): JSX.Element => {
  // --- typed state ---
  const [isSignIn, setIsSignIn] = useState<boolean>(true);
  const [email, setEmail] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [name, setName] = useState<string>("");
  const [message, setMessage] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const navigate = useNavigate();

  const toggleSignIn = (): void => setIsSignIn((s) => !s);

  // Use form submit rather than button click â€” better semantics & accessibility
  const handleSubmit = async (e: FormEvent<HTMLFormElement>): Promise<void> => {
    e.preventDefault();
    setMessage("");

    if (!email || !password || (!isSignIn && !name)) {
      setMessage("Please fill all fields");
      return;
    }

    setIsLoading(true);

    try {
      if (isSignIn) {
        const payload: LoginPayload = { email, password };
        const response = await axios.post<AuthResponse>(
          `${API_BASE}/api/auth/login`,
          payload,
          { withCredentials: true }
        );

        setMessage(response.data.message);
        navigate("/browse");
      } else {
        const payload: SignupPayload = { name, email, password };
        const response = await axios.post<AuthResponse>(
          `${API_BASE}/api/auth/signup`,
          payload,
          { withCredentials: true }
        );

        // optional: show a success message from API before redirect
        setMessage(response.data.message || "Signup successful");
        navigate("/browse");
      }
    } catch (error: unknown) {
      if (axios.isAxiosError(error)) {
        setMessage(error.response?.data?.message || "An error occurred");
      } else {
        setMessage("An unexpected error occurred");
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full h-screen relative">
      <Header />

      <img
        alt="netflix bg Image"
        src="https://assets.nflxext.com/ffe/siteui/vlv3/fc164b4b-f085-44ee-bb7f-ec7df8539eff/d23a1608-7d90-4da1-93d6-bae2fe60a69b/IN-en-20230814-popsignuptwoweeks-perspective_alpha_website_large.jpg"
        className="w-full h-screen object-cover"
      />

      <div className="bg-black opacity-85 absolute top-[20%] left-4/12 flex items-center justify-center">
        <form onSubmit={handleSubmit} className="w-[400px] p-8 text-white">
          <h3 className="font-bold text-white text-4xl mb-8">
            {isSignIn ? "Sign In" : "Create account"}
          </h3>

          {!isSignIn && (
            <input
              type="text"
              placeholder="Enter Your Name"
              className="w-full bg-gray-900 p-4 mb-4 rounded-lg border border-white"
              value={name}
              onChange={(e: ChangeEvent<HTMLInputElement>) => setName(e.target.value)}
            />
          )}

          <input
            type="text"
            value={email}
            onChange={(e: ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}
            placeholder="Email or Phone Number"
            className="w-full bg-gray-900 p-4 mb-4 rounded-lg border border-white"
          />

          <input
            type="password"
            placeholder="Password"
            className="w-full bg-gray-900 p-4  mb-6 rounded-lg border border-white"
            value={password}
            onChange={(e: ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}
          />

          <button
            type="submit"
            disabled={isLoading}
            aria-busy={isLoading}
            className="w-full bg-red-700 py-4 my-6 rounded cursor-pointer disabled:opacity-60"
          >
            {isLoading ? (isSignIn ? "Signing in..." : "Signing up...") : isSignIn ? "Sign In" : "Sign Up"}
          </button>

          {message && <p className="text-red-500 mb-4">{message}</p>}

          <p className="mt-2 text-gray-400 text-sm inline">
            {isSignIn ? "New to StreamWise? " : "Already registered? "}
            <span onClick={toggleSignIn} className="text-white font-bold text-lg cursor-pointer">
              {isSignIn ? "Sign Up Now" : "Sign In"}
            </span>
          </p>
        </form>
      </div>
    </div>
  );
};

export default Login;
